// Example: Shows how fields can be assigned to variables to be set
//          in the GUI.
{
  "subs": {
    // Each item here is described by,
    // "<subs_name>":
    //   "title": "<title>",
    //   "type" : "<str|num>",
    //   "widget": "<textinput|select>",
    //   "regex": <"regex">,  // only for widget == textinput,
    //                           when regex is satisfied widget turns green
    //   "choices": [<choice1>, <choice2>, ...],  // only for widget == select
    //   "default": <default>,
    //   "subs": // inner dependant subs
    //           { <key1> : { "subs_name1": {"val": <>, "type": "<str|num>" }, ...},
    //             <key2> : { "subs_name1": {"val": <>, "type": "<str|num>" }, ...}
    //           }
    // }
    //
    // Rules:
    // 1. key must not have any spaces or special characters
    //
    "Lot": {
      "title": "Lot (format #####)",
      "type" : "str", "widget": "textinput", "regex": "^\\d{5}$", "default": "95035"
    },
    "Loc": {
      "title": "Location",
      "type" : "str", "widget": "select", "choices": ["canada/ontario/milton",
                                                      "us/newyork/buffalo"],
      // inner dependant substitutions based on user input
      "subs" : {"canada/ontario/milton": { "TST000Min": { "val": 0.1, "type": "num" }},
                "us/newyork/buffalo":    { "TST000Min": { "val": 0.2, "type": "num" }}
      }
    },
    "TST000Max": {
      "title": "TST000 Max Attenuation (db)",
      "type" : "num", "widget": "select", "choices": [9.0, 10.0, 11.0]
    },
  },
  "info": {
    "product": "widget_1",
    "bom": "B00012-002",
    "lot": "%%Lot",         // GUI substitution
    "location": "%%Loc"     // GUI substitution
  },
  "config": {
    "fail_fast": false,
    "drivers": ["public.prism.drivers.fake.hwdrv_fake"]
  },
  "tests": [
    {
      "module": "public.prism.scripts.example.prod_v0.tst00xx",
      "options": {
        "fail_fast": false
        // add more key/value as required
      },
      "items": [
        {"id": "TST0xxSETUP",        "enable": true },
        {"id": "TST000_Meas",        "enable": true, "args": {"min": "%%TST000Min", "max": "%%TST000Max"}},

        // always called, no matter if test fails above
        {"id": "TST0xxTEARDOWN",        "enable": true },
      ]
    }
  ]
}